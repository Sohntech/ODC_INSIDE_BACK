generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  role         UserRole
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  admin        Admin?
  coach        Coach?
  learner      Learner?
  restaurateur Restaurateur?
  vigil        Vigil?
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications    Notification[] @relation("SentNotifications")
}

model Admin {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Coach {
  id          String            @id @default(uuid())
  matricule   String            @unique
  firstName   String
  lastName    String
  phone       String?
  photoUrl    String?
  qrCode      String?
  userId      String            @unique
  refId       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  referential Referential?      @relation(fields: [refId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  attendances CoachAttendance[]
  modules     Module[]
}

model Vigil {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String?
  photoUrl  String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Restaurateur {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String?
  photoUrl  String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Learner {
  id            String                 @id @default(uuid())
  matricule     String                 @unique
  firstName     String
  lastName      String
  address       String?
  gender        Gender
  birthDate     DateTime
  birthPlace    String
  phone         String
  photoUrl      String?
  status        LearnerStatus          @default(ACTIVE)
  qrCode        String                 @unique
  userId        String                 @unique
  refId         String?
  promotionId   String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  documents     Document[]
  grades        Grade[]
  promotion     Promotion              @relation(fields: [promotionId], references: [id])
  referential   Referential?           @relation(fields: [refId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  statusHistory LearnerStatusHistory[]
  attendances   LearnerAttendance[]
  meals         Meal[]
  tutor         Tutor?
  kit           Kit?
  sessionId     String?
  session       Session?               @relation(fields: [sessionId], references: [id])
}

model LearnerStatusHistory {
  id             String        @id @default(uuid())
  learner        Learner       @relation(fields: [learnerId], references: [id])
  learnerId      String
  previousStatus LearnerStatus?
  newStatus      LearnerStatus
  reason         String?
  date           DateTime      @default(now())

  @@index([learnerId])
}

model Tutor {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  email     String?
  address   String?
  learnerId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  learner   Learner  @relation(fields: [learnerId], references: [id])
}

model Kit {
  id        String   @id @default(uuid())
  laptop    Boolean  @default(false)
  charger   Boolean  @default(false)
  bag       Boolean  @default(false)
  polo      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  learner   Learner? @relation(fields: [learnerId], references: [id])
  learnerId String?  @unique
}

model Promotion {
  id           String          @id @default(uuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  photoUrl     String?
  status       PromotionStatus @default(ACTIVE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now())
  events       Event[]
  learners     Learner[]
  referentials Referential[] // Many-to-many relationship
}

model Referential {
  id               String     @id @default(uuid())
  name             String
  description      String?
  photoUrl         String?
  capacity         Int
  numberOfSessions Int       @default(1)
  sessionLength    Int?      // null means default 10 months
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  learners         Learner[]
  coaches          Coach[]
  modules          Module[]
  promotions       Promotion[]
  sessions         Session[]
}

model Session {
  id            String      @id @default(uuid())
  name          String      
  startDate     DateTime?   // Make dates optional
  endDate       DateTime?
  referentialId String
  capacity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  referential   Referential @relation(fields: [referentialId], references: [id])
  learners      Learner[]
  modules       Module[]

  @@unique([referentialId, name])
}

model Module {
  id          String      @id @default(uuid())
  name        String
  description String?
  photoUrl    String? // Add this line
  startDate   DateTime
  endDate     DateTime
  coachId     String
  refId       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  grades      Grade[]
  coach       Coach       @relation(fields: [coachId], references: [id])
  referential Referential @relation(fields: [refId], references: [id])
  sessionId   String?
  session     Session?    @relation(fields: [sessionId], references: [id])
}

model Grade {
  id        String   @id @default(uuid())
  value     Float
  comment   String?
  moduleId  String
  learnerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  learner   Learner  @relation(fields: [learnerId], references: [id])
  module    Module   @relation(fields: [moduleId], references: [id])
}

model LearnerAttendance {
  id            String        @id @default(uuid())
  date          DateTime
  isPresent     Boolean
  isLate        Boolean       @default(false)
  scanTime      DateTime?
  justification String?
  justificationComment String?
  status        AbsenceStatus @default(PENDING)
  documentUrl   String?
  learnerId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  learner       Learner       @relation(fields: [learnerId], references: [id])
}

model CoachAttendance {
  id        String    @id @default(uuid())
  date      DateTime
  isPresent Boolean
  isLate    Boolean   @default(false)
  scanTime  DateTime?
  coachId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  coach     Coach     @relation(fields: [coachId], references: [id])
}

model Meal {
  id        String   @id @default(uuid())
  date      DateTime
  type      String
  learnerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  learner   Learner  @relation(fields: [learnerId], references: [id])
}

model Document {
  id        String   @id @default(uuid())
  name      String
  type      String
  url       String
  learnerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  learner   Learner  @relation(fields: [learnerId], references: [id])
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  type        String
  location    String?
  promotionId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id])
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  receiverId  String          // ID of the user receiving the notification
  senderId    String?         // Optional: ID of the user sending the notification
  attendanceId String?        // Optional: Related attendance record
  receiver    User            @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  sender      User?           @relation("SentNotifications", fields: [senderId], references: [id])
}

enum UserRole {
  ADMIN
  COACH
  VIGIL
  RESTAURATEUR
  APPRENANT
}

enum Gender {
  MALE
  FEMALE
}

enum LearnerStatus {
  ACTIVE
  WAITING
  REPLACED
  REPLACEMENT
  ABANDONED
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
}

enum AbsenceStatus {
  TO_JUSTIFY    // Nouvel état initial
  PENDING       // En attente après soumission
  APPROVED      // Approuvé
  REJECTED      // Rejeté
}

enum NotificationType {
  JUSTIFICATION_SUBMITTED
  JUSTIFICATION_APPROVED
  JUSTIFICATION_REJECTED
}
